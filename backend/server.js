require('dotenv').config(); // Load environment variables from .env file
const express = require('express');
const cors = require('cors');
const OpenAI = require('openai'); // For OpenAI API

const app = express();
const port = process.env.PORT || 5000; // Render will provide PORT, use 5000 for local development

// --- Middleware ---
// Enable CORS for your frontend to communicate with this backend
// For production, replace '*' with your actual frontend URL (e.g., 'https://whoru-frontend.onrender.com')
app.use(cors({
    origin: '*', 
    methods: ['GET', 'POST', 'PUT', 'DELETE'],
    allowedHeaders: ['Content-Type', 'Authorization']
}));
app.use(express.json()); // To parse JSON request bodies from frontend

// --- OpenAI API Initialization ---
// Ensure OPENAI_API_KEY is set in your .env file (for local) or Render environment variables (for deploy)
const openaiApiKey = process.env.OPENAI_API_KEY;
if (!openaiApiKey) {
    console.error("OPENAI_API_KEY is not set in environment variables! Please set it and restart the server.");
    // In a production app, you might want a more graceful error handling than process.exit
    // For development, it's good to be strict.
    // process.exit(1); 
}
const openai = new OpenAI({
    apiKey: openaiApiKey,
});


// --- API Endpoint for Personality Description Generation ---
app.post('/api/generate-description', async (req, res) => {
    const { personalityType, descriptionPrompt } = req.body;

    if (!personalityType || !descriptionPrompt) {
        return res.status(400).json({ error: "Missing personalityType or descriptionPrompt in request body" });
    }

    try {
        console.log(`Generating description for type: ${personalityType}`);
        
        const chatCompletion = await openai.chat.completions.create({
            model: "gpt-3.5-turbo", // You can try "gpt-4" if you have access and budget
            messages: [{ role: "user", content: descriptionPrompt }],
            max_tokens: 1000, // Adjust as needed for the length of description
            temperature: 0.7, // Creativity level (0.0-1.0), 0.7 is good balance
        });

        const aiGeneratedRawText = chatCompletion.choices[0].message.content; // Raw text generated by OpenAI

        // Function to clean text (defined here for server.js scope)
        const cleanText = (text) => {
            return text.replace(/[✅⚠️]/g, '').replace(/\s+/g, ' ').trim();
        };

        // Parse the AI-generated text into structured data
        // This parsing logic needs to be robust as AI output can vary slightly
        const parsedDescription = {};
        const sections = {
            general: /সাধারণ বর্ণনা:([\s\S]*?)আপনার শক্তি:/,
            strengths: /আপনার শক্তি:([\s\S]*?)আপনার চ্যালেঞ্জ:/,
            challenges: /আপনার চ্যালেঞ্জ:([\s\S]*?)ক্যারিয়ার সাজেশন্স:/,
            career_suggestions: /ক্যারিয়ার সাজেশন্স:([\s\S]*?)সম্পর্ক টিপস:/,
            relationship_tips: /সম্পর্ক টিপস:([\s\S]*?)স্টার্ট স্মল স্টেপস:/,
            start_small_steps: /স্টার্ট স্মল স্টেপস:([\s\S]*?)$/, // Matches till end of string
        };

        let lastIndex = 0;
        let lastMatchEnd = 0;
        let foundGeneral = false;

        // Try to match each section sequentially
        for (const key in sections) {
            const regex = sections[key];
            const match = aiGeneratedRawText.substring(lastMatchEnd).match(regex);
            
            if (match && match[1]) {
                const content = cleanText(match[1]);
                if (key === 'general') {
                    parsedDescription.general = content;
                    foundGeneral = true;
                } else {
                    parsedDescription[key] = content.split('\n').filter(Boolean).map(item => cleanText(item.replace(/^- /, '')));
                }
                lastMatchEnd += aiGeneratedRawText.substring(lastMatchEnd).indexOf(match[0]) + match[0].length;
            } else if (key === 'general' && !foundGeneral) {
                // If general description not found, take everything before the first recognized heading
                const firstHeadingMatch = aiGeneratedRawText.match(/আপনার শক্তি:|আপনার চ্যালেঞ্জ:|ক্যারিয়ার সাজেশন্স:|সম্পর্ক টিপস:|স্টার্ট স্মল স্টেপস:/);
                if (firstHeadingMatch) {
                    parsedDescription.general = cleanText(aiGeneratedRawText.substring(0, firstHeadingMatch.index));
                    lastMatchEnd = firstHeadingMatch.index;
                    foundGeneral = true;
                } else {
                    parsedDescription.general = cleanText(aiGeneratedRawText); // Fallback: If no headings, treat entire text as general
                    foundGeneral = true;
                }
            }
        }
        
        // Ensure all keys are present even if AI didn't provide them, to avoid frontend errors
        if (!parsedDescription.general) parsedDescription.general = cleanText(aiGeneratedRawText); 
        if (!parsedDescription.strengths) parsedDescription.strengths = [];
        if (!parsedDescription.challenges) parsedDescription.challenges = [];
        if (!parsedDescription.career_suggestions) parsedDescription.career_suggestions = [];
        if (!parsedDescription.relationship_tips) parsedDescription.relationship_tips = [];
        if (!parsedDescription.start_small_steps) parsedDescription.start_small_steps = [];


        // Send back the structured data
        res.json({ description: parsedDescription });

    } catch (error) {
        console.error("Error generating description from AI:", error);
        res.status(500).json({ 
            error: "Failed to generate description from AI.", 
            details: error.message,
            stack: process.env.NODE_ENV === 'production' ? undefined : error.stack // Show stack in development
        });
    }
});

// --- Basic Root Endpoint ---
app.get('/', (req, res) => {
    res.send('WHORU Backend API is running!');
});


// --- Start the Server ---
app.listen(port, () => {
    console.log(`Backend server listening on port ${port}`);
});
